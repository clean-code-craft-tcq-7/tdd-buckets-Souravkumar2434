Assumptions:- 
	a) if only 1 value is passed in the list to the method then continuous range and number of reading is supposed to be empty.

1) Check validity of data with a simple method

def check_input_data_is_ok(list samples)

The method can take up any value as input, and will return True or False based on the datatype of value passed.
	a) method will return True if passed value is of type list.
	b) method will return False if passed value is of different type.

2) Get continuous range, number of readings in continuous range and generate output using simple method

def get_continuous_range_and_number_of_readings_and_generate_output(list samples)


The method can take a list of values, list can be empty, 1 value or more than 1 value as input and will return the list of continuous ranges, list of number of readings in that continuous range and generate output in csv format for the passed data.
	a) method will return ([],[]) if [] is passed as input.
	b) method will return ([],[]) if [1] is passed as input.(1 is e.g meaning single value is passed).
	c) method will return ([[4, 5]], [2]) if [4, 5] is passed as input. ([4, 5] is e.g meaning more than 1 value is passed).
	d) method will return ([[4, 5], [7, 9]], [2, 3]) if [4, 5, 8, 7, 9] is passed as input. ([4, 5, 8, 7, 9] is e.g meaning more than 1 value is passed).


Refactoring of method get_continuous_range_and_number_of_readings_and_generate_output

Refactoring will be done in 3 steps

	a) separate the functionality of getting continuous range in one method.
	b) separate the functionality of getting number of readings in continuous range in one method.
	c) separate the functionality of generating output in csv format in one method.

	1) Get continuous range from data with a simple method

	def get_continuous_range(list samples)

	The method can take a list of values, list can be empty, 1 value or more than 1 values as input  and will return the list of continuous ranges in the passed data.
		a) method will return [] if [] is passed as input.
		b) method will return [] if [1] is passed as input. (1 is e.g meaning single value is passed).
		c) method will return [[4, 5]] if [4, 5] is passed as input. ([4, 5] is e.g meaning more than 1 value is passed).
		d) method will return [[4, 5], [7, 9]] if [4, 5, 8, 7, 9] is passed as input. ([4, 5, 8, 7, 9] is e.g meaning more than 1 value is passed).
	  
	Refactoring of method  get_continuous_range

	Refactoring will be done in 4 steps

		Condition for executing  these 4 steps is input sample should have more than 1 value.
			a) separate the functionality of sorting the input samples in one method.
			b) separate the functionality of checking status of continuity or repeatidity  in samples in one method.
			c) separate the functionality of getting difference between samples in one method.
			d) separate the functionality of calculating the continuous range in one method.


		1) Get sorted samples using simple method

		def get_sorted_array(list samples)

		The method can take a list of values, list can be empty, 1 value or more than 1 values as input and will return the list with sorted samples.
			a) method will return [] if [] is passed as input.
			b) method will return [1] if [1] is passed as input.
			c) method will return [4, 5] if [4, 5] is passed as input.
			d) method will return [4, 5, 6, 7, 8, 9] if [4, 6, 5, 8, 7, 9] is passed as input.

		2) Get status of continuity or repeatidity in data using simple method

		def check_status_of_continuity_or_repeatidity_of_data(int value)

		The method will take a single value as input and will return True or False based on the value.
			a) method will return True if value is less than or equal to 1.
			b) method will return False if value is more than 1.

		3) Get difference between consecutive samples using simple method

		def get_difference_between_the_consecutive_samples(list samples , list diff_of_samples)

		The method will take 2 arguments as input , first argument will be list of samples and second argument will be an empty list and will return a list consisting of difference between consecutive samples with 0 as the first element.
			a) method will return [0, 1] if [4, 5] is passed as input.
			b) method will return [0, 1, 2] if [4, 5, 7] is passed as input.

		4) Calculate continuous range using simple method

		def calculate_continuous_range(list samples, list continuous_range)

		The method will take 2 arguments as input, first argument will be list of samples and second argument will be an empty list and will return the list of continuous ranges in the passed samples.
			a) method will return [] if [] is passed as input.
			b) method will return [] if [1] is passed as input. (1 is e.g meaning single value is passed).
			c) method will return [[4, 5]] if [4, 5] is passed as input. ([4, 5] is e.g meaning more than 1 value is passed).
			d) method will return [[4, 5], [7, 9]] if [4, 5, 8, 7, 9] is passed as input. ([4, 5, 8, 7, 9] is e.g meaning more than 1 value is passed).

		

	2) Get number of readings in continuous range with simple method
	
	def get_number_of_readings_in_continuous_range(list continuousrange, list samples)
	
	The method will take list of continuous range and list of samples and will give a list of number of readings in that continuous range.
			a) method will return [2] if ([[4, 5]], [4, 5]) is passed as input.
			b) method will return [2, 3] if ([[4, 5] , [7, 9]],[4, 5, 7, 8, 9]) is passed as input.
	
	3) Generate output in csv format with simple method
	
	def create_csv_format_string(list continuous_range, list number_of_readings)
	
	The method will take 2 arguments as input, first will be list of continuous range and second will be list of number of readings and will return a string.
			a) method will return "Range, Readings\n4-5, 2", if ([[4, 5]], [2]) are passed as input.
			b) method will return "Range, Readings\n4-5, 2\n7-8, 2", if ([[4, 5], [7, 8]], [2, 2]) are passed as input.
			
			
3) Get continuous range, number of readings and generate output with simple method

def read_12bit_A2D_converter_and_generate_output(list samples)

the method will take the list of samples from 12bit A2D converter and will return continuous range and number of readings and also will generate result in csv format.
	a) the 12bit integer value has limits from 0 - 4094.
	b) any value above 4094 will be considered as an error and it will not be considered for finding continuous range.

Refactoring of this method is done in 2 step:
	a) 12bit A2D value is converted into current(amps) with the help of pure function.
	b) continuous range and number of readings will be returned by def get_continuous_range_and_number_of_readings_and_generate_output(list samples) method.
	
	def convert_12bit_A2D_value_to_current_amps( int value)
	
	The method will take a 12bit integer value and will return a integer value of current.
